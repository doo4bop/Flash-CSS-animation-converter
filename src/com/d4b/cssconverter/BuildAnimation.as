package com.d4b.cssconverter{	import flash.display.MovieClip;	import flash.filesystem.*;	import flash.events.Event;	import flash.events.MouseEvent;	import flash.net.URLLoader;	import flash.net.URLRequest;	import flash.desktop.NativeApplication;	import com.adobe.serialization.json.JSON;		import com.d4b.cssconverter.Gui;	import com.d4b.cssconverter.GuiWindow;	import flash.display.StageAlign;	public class BuildAnimation extends MovieClip	{		private const PATH:String = 'd4b_css_animations/';		private const CSSPATH:String = 'css/';		private const CSS_FILE:String = 'd4b_animation.css';		private const TEMPLATES:String = 'templates/';		private const BASE_FILES:String = TEMPLATES + 'basefiles';		public var bundleFiles:File;		public var chapterID:Number;		public var bannerName:String;		public var bundlePath:String;		public var panel:Panel;		public var guiWindow:GuiWindow;				public function BuildAnimation()		{			this.stage.nativeWindow.addEventListener(Event.CLOSING, closeApplication, false, 0, true); 			loadTemplates();		}				private function closeApplication (e:Event){				NativeApplication.nativeApplication.exit();		}		public function loadTemplates()		{			var templates:Array = [ {src: TEMPLATES + "index", destination:Templates.index } ];			templates.push(  {src: TEMPLATES + "animation", destination:Templates.animation } );			templates.push(  {src: TEMPLATES + "image", destination:Templates.image } );			templates.push(  {src: TEMPLATES + "animation_base", destination:Templates.animation_base} );			Templates.loadTemplates( templates, init);		}		public function init( e:Event=null )		{					guiWindow = new GuiWindow();			guiWindow.createDestinationFolder();			guiWindow.addEventListener( Gui.BATCH_CLICKED, saveBundle);		}				public function saveBundle( e:Event = null)		{			if ( !!Config.log)			{				Config.log(':: CONVERTER :: Started');			}			bannerName = Config.animationName;			bundlePath = PATH + bannerName;			Templates.path = bundlePath;			createBundleDir();			moveAssets();			Panel(panel).addEventListener( Panel.IMAGES_BUILDED, createHtml);			Panel(panel).addEventListener( Panel.TRANSITION_DONE, writeCSS);			Panel(panel).batch();		}		public function moveAssets()		{			var file:File = File.applicationDirectory;			file = file.resolvePath(BASE_FILES);			file.copyTo( bundleFiles, true );		}		public function createBundleDir()		{			bundleFiles = File.documentsDirectory;			bundleFiles = bundleFiles.resolvePath(bundlePath);			if (bundleFiles.isDirectory)			{				bundleFiles.deleteDirectory(true);			}			bundleFiles.createDirectory();		}		public function createHtml(e:Event=null)		{			var indexdata:Object = {};			indexdata['animation-images'] = Panel(panel).imagesMarkup;			var indexMarkup:String = Templates.populate(Templates.index,indexdata);			var file:File = File.documentsDirectory;			file = file.resolvePath(bundlePath + '/index.html');			var fileStream:FileStream = new FileStream();			fileStream.open(file, FileMode.WRITE);			fileStream.writeUTFBytes( indexMarkup );			fileStream.close();			if (! ! Config.log)			{				Config.log(':: HTML created');			}		}		public function writeCSS( e:Event = null)		{			var cssdata:Object = {};			cssdata.width = Math.round(stage.stageWidth);			cssdata.height = Math.round(stage.stageHeight);			var bannerclass:String = Templates.populate(Templates.animation_base,cssdata);			var animationCSS:String = bannerclass + Panel(panel).animationCSS;			var file:File = File.documentsDirectory;			file = file.resolvePath(bundlePath + '/css/' + CSS_FILE);			var fileStream:FileStream = new FileStream();			fileStream.open(file, FileMode.WRITE);			fileStream.writeUTFBytes( animationCSS );			fileStream.close();			if (! ! Config.log)			{				Config.log(':: CSS created');			}			if (! ! Config.log)			{				Config.log('Animation saved in: \n' + bundleFiles.url );			}		}	}}