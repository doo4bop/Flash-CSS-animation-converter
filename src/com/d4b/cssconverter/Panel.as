package com.d4b.cssconverter{	import flash.display.MovieClip;	import com.adobe.serialization.json.JSON;	import flash.events.Event;	import flash.display.DisplayObject;	import flash.desktop.NativeApplication;		public class Panel extends MovieClip	{		public static var IMAGES_BUILDED:String = 'Panel.imagesBuilded';		public static var TRANSITION_DONE:String = 'Panel.transitionDone';		public var imagesMarkup:String = '';		public var animationCSS:String = '';		public var layers:Array = [];		public var layersInfo:Array = [];		private var lastFrame:Number = 1;		private var builder :BuildAnimation = new BuildAnimation();		public function Panel()		{			stage.addEventListener( Event.CLOSING, closeApplication, false, 0, true);			builder.addEventListener( BuildAnimation.BATCH_CLICKED , batch);			stop();		}				private function closeApplication (e:Event){				NativeApplication.nativeApplication.exit();		}				public function batch( e:Event = null )		{			trace( "Panel: ", this.name, Templates.path);			buildLayers();			assessment();		}		private function buildLayers()		{			if (!!Config.log){				Config.log(':: Building Layers');			}			var i = 0;			for (i; i < this.numChildren; i++)			{				var element:DisplayObject = this.getChildAt(i);				var layer:Layer = new Layer( element );				layer.saveImage();				imagesMarkup = imagesMarkup.concat(layer.imagemarkup);				layers.push(element);				var layerInfo:LayerVO = new LayerVO  ;				layerInfo.source = layer.fileURI;				layerInfo.classname = layer.imageData.classname;				layerInfo.setDimensions( element.width, element.height);				layersInfo.push(layerInfo);			}						builder.createHtml( this );			this.dispatchEvent( new Event(IMAGES_BUILDED) );		}		public function assessment():void		{			if (!!Config.log){				Config.log(':: Cheking Keyframe ' + this.currentFrame);			}			stop();			var amountFrames = this.currentFrame - lastFrame;			var time = amountFrames / stage.frameRate;			var i = 0;			for (i; i < this.numChildren; i++)			{				var layer = this.getChildAt(i);				var transitionInfo:TransitionVO = new TransitionVO();				transitionInfo.properties.x =  trim(layer.x, 2);				transitionInfo.properties.y =  trim(layer.y, 2);				transitionInfo.properties.z = !!layer.z ?  trim(layer.z,2) :  0;				transitionInfo.properties.rotationX =  trim(layer.rotationX, 2);				transitionInfo.properties.rotationY =  trim(layer.rotationY, 2);				transitionInfo.properties.rotationZ = layer.rotation != 0 ?  trim(layer.rotation, 2) :  trim(layer.rotationZ, 2);				transitionInfo.properties.scaleX =  trim(layer.scaleX, 2);				transitionInfo.properties.scaleY = trim(layer.scaleY, 2);				transitionInfo.properties.alpha = layer.alpha;				transitionInfo.frame = this.currentFrame;				var index = layers.indexOf(layer);				layersInfo[index].frames.push( transitionInfo);			}			if (this.currentFrame < this.totalFrames)			{				lastFrame = this.currentFrame;				this.play();			}			else			{				createCSS();				builder.writeCSS( this );				this.dispatchEvent( new Event(TRANSITION_DONE) );			}		}		public function createCSS()		{			var i:int = 0;			for (i; i< layersInfo.length; i++)			{				var layerInfo:LayerVO = layersInfo[i];				var cssProperties:Object = { standard:'', moz:'',o:'',webkit:''	};				var cssData:Object = {};				var p:int = 0;				for (p; p < layerInfo.frames.length; p++)				{					var keyFrame:TransitionVO = layerInfo.frames[p];					var percent:Number = Math.round(keyFrame.frame * 100 / this.totalFrames);					var aniamtionCss:String = '';										if( Config.POSITION_ENABLED){						aniamtionCss += '		translate3d('+ keyFrame.properties.x +'px,'+  keyFrame.properties.y +'px,'+keyFrame.properties.z+ 'px ) \n';					}					if( Config.ROTATION_ENABLED){						aniamtionCss += '		rotateX('+ keyFrame.properties.rotationX +'deg) \n';						aniamtionCss += '		rotateY('+ keyFrame.properties.rotationY +'deg) \n';						aniamtionCss += '		rotateZ('+ keyFrame.properties.rotationZ +'deg) \n';					}					if( Config.SCALE_ENABLED){						aniamtionCss += '		scale('+ keyFrame.properties.scaleX + ',' + keyFrame.properties.scaleY +') \n';					}					if (p === 0 ){						cssData['initial_frame'] = 'transform:' + aniamtionCss + ';\n' ;						cssData['initial_frame'] += '-webkit-transform:' + aniamtionCss + ';\n' ;						cssData['initial_frame'] += '-moz-transform:' + aniamtionCss + ';\n' ;						cssData['initial_frame'] += '-o-transform:' + aniamtionCss + ';\n' ;					}					cssProperties.standard += '	'+ percent + '%  {transform:\n' + aniamtionCss + '	}\n';					cssProperties.webkit += '	'+ percent + '%  {-webkit-transform:\n' + aniamtionCss + ';}\n';					cssProperties.moz += '	'+ percent + '%  {-moz-transform:\n' + aniamtionCss + '	}\n';					cssProperties.o += '	'+ percent + '%  {-o-transform:\n' + aniamtionCss + '	}\n';				}								cssData.classname = '.'+layerInfo.classname;				cssData.keyframes_name = layerInfo.classname + "-animation";				cssData.keyframes = cssProperties.standard;				cssData['-o-keyframes'] = cssProperties.o;				cssData['-webkit-keyframes'] = cssProperties.webkit;				cssData['-moz-keyframes'] = cssProperties.moz;												cssData.duration = trim( ( this.totalFrames /  stage.frameRate ),2) + 's';				animationCSS = animationCSS.concat(Templates.populate(Templates.animation,cssData));			}		}		public function trim(theNumber:Number, decPlaces:Number):Number		{			if (decPlaces >= 0)			{				var temp:Number = Math.pow(10,decPlaces);				return Math.round(theNumber * temp) / temp;			}			return theNumber;		}	}}